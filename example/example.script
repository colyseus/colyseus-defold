local Colyseus = require "colyseus.client"

local client
local room

function init(self)
    msg.post(".", "acquire_input_focus")


    -- Add initialization code here
    -- Remove this function if not needed
    client = Colyseus("ws://localhost:2567")
    client.auth.token = "123"

    -- -- get all available rooms at every 3 seconds (example)
    -- timer.delay(3, true, function()
    --   client:get_available_rooms("", function(err, rooms)
    --     if err then
    --       print("get_available_rooms error =>")
    --       pprint(err)
    --     end
    --     print("available rooms =>")
    --     pprint(rooms)
    --   end)
    -- end)

    -- join "demo" room
    client:join_or_create("my_room", function(err, room)
      print("\n\nclient:join_or_create(), callback =>\n\n")
      if (err) then
        print("JOIN ERROR:")
        pprint(err)
        return
      end

      -- print("PLAYERS:")
      -- pprint(room.state.players)
      -- pprint(room.state.messages)
      print("============================================")
      print("successfully joined '" .. room.name .. "'")
      print("============================================")

      room.state:listen("turn", function(current, previous)
        print("turn changed, current: ", current, ", previous: ", previous)
      end)

      room.state.players:on_add(function(player, i)
        print("ADD PLAYER!! i =>", i, "player =>", player)

        player:listen("x", function(value, prevous_value)
          print("player.x has changed! value =>", value, "prevous_value =>", prevous_value)
        end)

        -- player:on_change(function(changes)
        --   print("player changed")
        --   pprint(changes)
        -- end)
      end)

      room.state.messages:on_add(function(msg, i)
        print("message arrived", msg.message)
      end)

      room:on_message("broadcast", function(message)
        print("colyseus-defold: 'broadcast' message received =>")
        pprint(message)
      end)

      room:on_message("data", function(message)
        print("colyseus-defold: 'data' message received =>")
        pprint(message)
      end)

      room:on("statechange", function(state)
        -- room:send("Hello world!")
        -- print("STATE CHANGE")
        -- pprint(state)
      end)

      room:on("leave", function()
        print("left '" .. room.name .. "'")
      end)

      room:send("type1", { hello = "world" })
      room:send(0, { hello = "world" })

    end)

end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
    msg.post(".", "release_input_focus")
end

function update(self, dt)
   -- Add update code here
   -- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
   -- Add message-handling code here
   -- Remove this function if not needed
end

function on_input(self, action_id, action)
  -- Add input-handling code here
  -- Remove this function if not needed
end

function on_reload(self)
   -- Add reload-handling code here
   -- Remove this function if not needed
end
